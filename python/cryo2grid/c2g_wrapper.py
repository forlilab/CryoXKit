# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
############################################
# This file is distributed under the GNU   #
# LPGL-2.1-or-later Open Source License.   #
# See LICENSE file in top directory for    #
# details.                                 #
#                                          #
# Copyright (c) 2020 ADsandbox developers: #
#               Andreas F. Tillack         #
#               Althea A. Hansel           #
#               Matthew Holcomb            #
#           Forli Lab @ Scripps Research   #
############################################

"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _c2g_wrapper
else:
    import _c2g_wrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _c2g_wrapper.delete_SwigPyIterator

    def value(self):
        return _c2g_wrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _c2g_wrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _c2g_wrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _c2g_wrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _c2g_wrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _c2g_wrapper.SwigPyIterator_copy(self)

    def next(self):
        return _c2g_wrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _c2g_wrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _c2g_wrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _c2g_wrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _c2g_wrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _c2g_wrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _c2g_wrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _c2g_wrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _c2g_wrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _c2g_wrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _c2g_wrapper:
_c2g_wrapper.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _c2g_wrapper.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _c2g_wrapper.IntVector___nonzero__(self)

    def __bool__(self):
        return _c2g_wrapper.IntVector___bool__(self)

    def __len__(self):
        return _c2g_wrapper.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _c2g_wrapper.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _c2g_wrapper.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _c2g_wrapper.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _c2g_wrapper.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _c2g_wrapper.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _c2g_wrapper.IntVector___setitem__(self, *args)

    def pop(self):
        return _c2g_wrapper.IntVector_pop(self)

    def append(self, x):
        return _c2g_wrapper.IntVector_append(self, x)

    def empty(self):
        return _c2g_wrapper.IntVector_empty(self)

    def size(self):
        return _c2g_wrapper.IntVector_size(self)

    def swap(self, v):
        return _c2g_wrapper.IntVector_swap(self, v)

    def begin(self):
        return _c2g_wrapper.IntVector_begin(self)

    def end(self):
        return _c2g_wrapper.IntVector_end(self)

    def rbegin(self):
        return _c2g_wrapper.IntVector_rbegin(self)

    def rend(self):
        return _c2g_wrapper.IntVector_rend(self)

    def clear(self):
        return _c2g_wrapper.IntVector_clear(self)

    def get_allocator(self):
        return _c2g_wrapper.IntVector_get_allocator(self)

    def pop_back(self):
        return _c2g_wrapper.IntVector_pop_back(self)

    def erase(self, *args):
        return _c2g_wrapper.IntVector_erase(self, *args)

    def __init__(self, *args):
        _c2g_wrapper.IntVector_swiginit(self, _c2g_wrapper.new_IntVector(*args))

    def push_back(self, x):
        return _c2g_wrapper.IntVector_push_back(self, x)

    def front(self):
        return _c2g_wrapper.IntVector_front(self)

    def back(self):
        return _c2g_wrapper.IntVector_back(self)

    def assign(self, n, x):
        return _c2g_wrapper.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _c2g_wrapper.IntVector_resize(self, *args)

    def insert(self, *args):
        return _c2g_wrapper.IntVector_insert(self, *args)

    def reserve(self, n):
        return _c2g_wrapper.IntVector_reserve(self, n)

    def capacity(self):
        return _c2g_wrapper.IntVector_capacity(self)
    __swig_destroy__ = _c2g_wrapper.delete_IntVector

# Register IntVector in _c2g_wrapper:
_c2g_wrapper.IntVector_swigregister(IntVector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _c2g_wrapper.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _c2g_wrapper.FloatVector___nonzero__(self)

    def __bool__(self):
        return _c2g_wrapper.FloatVector___bool__(self)

    def __len__(self):
        return _c2g_wrapper.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _c2g_wrapper.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _c2g_wrapper.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _c2g_wrapper.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _c2g_wrapper.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _c2g_wrapper.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _c2g_wrapper.FloatVector___setitem__(self, *args)

    def pop(self):
        return _c2g_wrapper.FloatVector_pop(self)

    def append(self, x):
        return _c2g_wrapper.FloatVector_append(self, x)

    def empty(self):
        return _c2g_wrapper.FloatVector_empty(self)

    def size(self):
        return _c2g_wrapper.FloatVector_size(self)

    def swap(self, v):
        return _c2g_wrapper.FloatVector_swap(self, v)

    def begin(self):
        return _c2g_wrapper.FloatVector_begin(self)

    def end(self):
        return _c2g_wrapper.FloatVector_end(self)

    def rbegin(self):
        return _c2g_wrapper.FloatVector_rbegin(self)

    def rend(self):
        return _c2g_wrapper.FloatVector_rend(self)

    def clear(self):
        return _c2g_wrapper.FloatVector_clear(self)

    def get_allocator(self):
        return _c2g_wrapper.FloatVector_get_allocator(self)

    def pop_back(self):
        return _c2g_wrapper.FloatVector_pop_back(self)

    def erase(self, *args):
        return _c2g_wrapper.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _c2g_wrapper.FloatVector_swiginit(self, _c2g_wrapper.new_FloatVector(*args))

    def push_back(self, x):
        return _c2g_wrapper.FloatVector_push_back(self, x)

    def front(self):
        return _c2g_wrapper.FloatVector_front(self)

    def back(self):
        return _c2g_wrapper.FloatVector_back(self)

    def assign(self, n, x):
        return _c2g_wrapper.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _c2g_wrapper.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _c2g_wrapper.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _c2g_wrapper.FloatVector_reserve(self, n)

    def capacity(self):
        return _c2g_wrapper.FloatVector_capacity(self)
    __swig_destroy__ = _c2g_wrapper.delete_FloatVector

# Register FloatVector in _c2g_wrapper:
_c2g_wrapper.FloatVector_swigregister(FloatVector)

class FloatVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _c2g_wrapper.FloatVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _c2g_wrapper.FloatVectorVector___nonzero__(self)

    def __bool__(self):
        return _c2g_wrapper.FloatVectorVector___bool__(self)

    def __len__(self):
        return _c2g_wrapper.FloatVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _c2g_wrapper.FloatVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _c2g_wrapper.FloatVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _c2g_wrapper.FloatVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _c2g_wrapper.FloatVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _c2g_wrapper.FloatVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _c2g_wrapper.FloatVectorVector___setitem__(self, *args)

    def pop(self):
        return _c2g_wrapper.FloatVectorVector_pop(self)

    def append(self, x):
        return _c2g_wrapper.FloatVectorVector_append(self, x)

    def empty(self):
        return _c2g_wrapper.FloatVectorVector_empty(self)

    def size(self):
        return _c2g_wrapper.FloatVectorVector_size(self)

    def swap(self, v):
        return _c2g_wrapper.FloatVectorVector_swap(self, v)

    def begin(self):
        return _c2g_wrapper.FloatVectorVector_begin(self)

    def end(self):
        return _c2g_wrapper.FloatVectorVector_end(self)

    def rbegin(self):
        return _c2g_wrapper.FloatVectorVector_rbegin(self)

    def rend(self):
        return _c2g_wrapper.FloatVectorVector_rend(self)

    def clear(self):
        return _c2g_wrapper.FloatVectorVector_clear(self)

    def get_allocator(self):
        return _c2g_wrapper.FloatVectorVector_get_allocator(self)

    def pop_back(self):
        return _c2g_wrapper.FloatVectorVector_pop_back(self)

    def erase(self, *args):
        return _c2g_wrapper.FloatVectorVector_erase(self, *args)

    def __init__(self, *args):
        _c2g_wrapper.FloatVectorVector_swiginit(self, _c2g_wrapper.new_FloatVectorVector(*args))

    def push_back(self, x):
        return _c2g_wrapper.FloatVectorVector_push_back(self, x)

    def front(self):
        return _c2g_wrapper.FloatVectorVector_front(self)

    def back(self):
        return _c2g_wrapper.FloatVectorVector_back(self)

    def assign(self, n, x):
        return _c2g_wrapper.FloatVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _c2g_wrapper.FloatVectorVector_resize(self, *args)

    def insert(self, *args):
        return _c2g_wrapper.FloatVectorVector_insert(self, *args)

    def reserve(self, n):
        return _c2g_wrapper.FloatVectorVector_reserve(self, n)

    def capacity(self):
        return _c2g_wrapper.FloatVectorVector_capacity(self)
    __swig_destroy__ = _c2g_wrapper.delete_FloatVectorVector

# Register FloatVectorVector in _c2g_wrapper:
_c2g_wrapper.FloatVectorVector_swigregister(FloatVectorVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _c2g_wrapper.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _c2g_wrapper.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _c2g_wrapper.DoubleVector___bool__(self)

    def __len__(self):
        return _c2g_wrapper.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _c2g_wrapper.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _c2g_wrapper.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _c2g_wrapper.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _c2g_wrapper.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _c2g_wrapper.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _c2g_wrapper.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _c2g_wrapper.DoubleVector_pop(self)

    def append(self, x):
        return _c2g_wrapper.DoubleVector_append(self, x)

    def empty(self):
        return _c2g_wrapper.DoubleVector_empty(self)

    def size(self):
        return _c2g_wrapper.DoubleVector_size(self)

    def swap(self, v):
        return _c2g_wrapper.DoubleVector_swap(self, v)

    def begin(self):
        return _c2g_wrapper.DoubleVector_begin(self)

    def end(self):
        return _c2g_wrapper.DoubleVector_end(self)

    def rbegin(self):
        return _c2g_wrapper.DoubleVector_rbegin(self)

    def rend(self):
        return _c2g_wrapper.DoubleVector_rend(self)

    def clear(self):
        return _c2g_wrapper.DoubleVector_clear(self)

    def get_allocator(self):
        return _c2g_wrapper.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _c2g_wrapper.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _c2g_wrapper.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _c2g_wrapper.DoubleVector_swiginit(self, _c2g_wrapper.new_DoubleVector(*args))

    def push_back(self, x):
        return _c2g_wrapper.DoubleVector_push_back(self, x)

    def front(self):
        return _c2g_wrapper.DoubleVector_front(self)

    def back(self):
        return _c2g_wrapper.DoubleVector_back(self)

    def assign(self, n, x):
        return _c2g_wrapper.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _c2g_wrapper.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _c2g_wrapper.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _c2g_wrapper.DoubleVector_reserve(self, n)

    def capacity(self):
        return _c2g_wrapper.DoubleVector_capacity(self)
    __swig_destroy__ = _c2g_wrapper.delete_DoubleVector

# Register DoubleVector in _c2g_wrapper:
_c2g_wrapper.DoubleVector_swigregister(DoubleVector)

class DoubleVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _c2g_wrapper.DoubleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _c2g_wrapper.DoubleVectorVector___nonzero__(self)

    def __bool__(self):
        return _c2g_wrapper.DoubleVectorVector___bool__(self)

    def __len__(self):
        return _c2g_wrapper.DoubleVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _c2g_wrapper.DoubleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _c2g_wrapper.DoubleVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _c2g_wrapper.DoubleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _c2g_wrapper.DoubleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _c2g_wrapper.DoubleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _c2g_wrapper.DoubleVectorVector___setitem__(self, *args)

    def pop(self):
        return _c2g_wrapper.DoubleVectorVector_pop(self)

    def append(self, x):
        return _c2g_wrapper.DoubleVectorVector_append(self, x)

    def empty(self):
        return _c2g_wrapper.DoubleVectorVector_empty(self)

    def size(self):
        return _c2g_wrapper.DoubleVectorVector_size(self)

    def swap(self, v):
        return _c2g_wrapper.DoubleVectorVector_swap(self, v)

    def begin(self):
        return _c2g_wrapper.DoubleVectorVector_begin(self)

    def end(self):
        return _c2g_wrapper.DoubleVectorVector_end(self)

    def rbegin(self):
        return _c2g_wrapper.DoubleVectorVector_rbegin(self)

    def rend(self):
        return _c2g_wrapper.DoubleVectorVector_rend(self)

    def clear(self):
        return _c2g_wrapper.DoubleVectorVector_clear(self)

    def get_allocator(self):
        return _c2g_wrapper.DoubleVectorVector_get_allocator(self)

    def pop_back(self):
        return _c2g_wrapper.DoubleVectorVector_pop_back(self)

    def erase(self, *args):
        return _c2g_wrapper.DoubleVectorVector_erase(self, *args)

    def __init__(self, *args):
        _c2g_wrapper.DoubleVectorVector_swiginit(self, _c2g_wrapper.new_DoubleVectorVector(*args))

    def push_back(self, x):
        return _c2g_wrapper.DoubleVectorVector_push_back(self, x)

    def front(self):
        return _c2g_wrapper.DoubleVectorVector_front(self)

    def back(self):
        return _c2g_wrapper.DoubleVectorVector_back(self)

    def assign(self, n, x):
        return _c2g_wrapper.DoubleVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _c2g_wrapper.DoubleVectorVector_resize(self, *args)

    def insert(self, *args):
        return _c2g_wrapper.DoubleVectorVector_insert(self, *args)

    def reserve(self, n):
        return _c2g_wrapper.DoubleVectorVector_reserve(self, n)

    def capacity(self):
        return _c2g_wrapper.DoubleVectorVector_capacity(self)
    __swig_destroy__ = _c2g_wrapper.delete_DoubleVectorVector

# Register DoubleVectorVector in _c2g_wrapper:
_c2g_wrapper.DoubleVectorVector_swigregister(DoubleVectorVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _c2g_wrapper.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _c2g_wrapper.StringVector___nonzero__(self)

    def __bool__(self):
        return _c2g_wrapper.StringVector___bool__(self)

    def __len__(self):
        return _c2g_wrapper.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _c2g_wrapper.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _c2g_wrapper.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _c2g_wrapper.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _c2g_wrapper.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _c2g_wrapper.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _c2g_wrapper.StringVector___setitem__(self, *args)

    def pop(self):
        return _c2g_wrapper.StringVector_pop(self)

    def append(self, x):
        return _c2g_wrapper.StringVector_append(self, x)

    def empty(self):
        return _c2g_wrapper.StringVector_empty(self)

    def size(self):
        return _c2g_wrapper.StringVector_size(self)

    def swap(self, v):
        return _c2g_wrapper.StringVector_swap(self, v)

    def begin(self):
        return _c2g_wrapper.StringVector_begin(self)

    def end(self):
        return _c2g_wrapper.StringVector_end(self)

    def rbegin(self):
        return _c2g_wrapper.StringVector_rbegin(self)

    def rend(self):
        return _c2g_wrapper.StringVector_rend(self)

    def clear(self):
        return _c2g_wrapper.StringVector_clear(self)

    def get_allocator(self):
        return _c2g_wrapper.StringVector_get_allocator(self)

    def pop_back(self):
        return _c2g_wrapper.StringVector_pop_back(self)

    def erase(self, *args):
        return _c2g_wrapper.StringVector_erase(self, *args)

    def __init__(self, *args):
        _c2g_wrapper.StringVector_swiginit(self, _c2g_wrapper.new_StringVector(*args))

    def push_back(self, x):
        return _c2g_wrapper.StringVector_push_back(self, x)

    def front(self):
        return _c2g_wrapper.StringVector_front(self)

    def back(self):
        return _c2g_wrapper.StringVector_back(self)

    def assign(self, n, x):
        return _c2g_wrapper.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _c2g_wrapper.StringVector_resize(self, *args)

    def insert(self, *args):
        return _c2g_wrapper.StringVector_insert(self, *args)

    def reserve(self, n):
        return _c2g_wrapper.StringVector_reserve(self, n)

    def capacity(self):
        return _c2g_wrapper.StringVector_capacity(self)
    __swig_destroy__ = _c2g_wrapper.delete_StringVector

# Register StringVector in _c2g_wrapper:
_c2g_wrapper.StringVector_swigregister(StringVector)

class ConstCharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _c2g_wrapper.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _c2g_wrapper.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _c2g_wrapper.ConstCharVector___bool__(self)

    def __len__(self):
        return _c2g_wrapper.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _c2g_wrapper.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _c2g_wrapper.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _c2g_wrapper.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _c2g_wrapper.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _c2g_wrapper.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _c2g_wrapper.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _c2g_wrapper.ConstCharVector_pop(self)

    def append(self, x):
        return _c2g_wrapper.ConstCharVector_append(self, x)

    def empty(self):
        return _c2g_wrapper.ConstCharVector_empty(self)

    def size(self):
        return _c2g_wrapper.ConstCharVector_size(self)

    def swap(self, v):
        return _c2g_wrapper.ConstCharVector_swap(self, v)

    def begin(self):
        return _c2g_wrapper.ConstCharVector_begin(self)

    def end(self):
        return _c2g_wrapper.ConstCharVector_end(self)

    def rbegin(self):
        return _c2g_wrapper.ConstCharVector_rbegin(self)

    def rend(self):
        return _c2g_wrapper.ConstCharVector_rend(self)

    def clear(self):
        return _c2g_wrapper.ConstCharVector_clear(self)

    def get_allocator(self):
        return _c2g_wrapper.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _c2g_wrapper.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _c2g_wrapper.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        _c2g_wrapper.ConstCharVector_swiginit(self, _c2g_wrapper.new_ConstCharVector(*args))

    def push_back(self, x):
        return _c2g_wrapper.ConstCharVector_push_back(self, x)

    def front(self):
        return _c2g_wrapper.ConstCharVector_front(self)

    def back(self):
        return _c2g_wrapper.ConstCharVector_back(self)

    def assign(self, n, x):
        return _c2g_wrapper.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _c2g_wrapper.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _c2g_wrapper.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _c2g_wrapper.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _c2g_wrapper.ConstCharVector_capacity(self)
    __swig_destroy__ = _c2g_wrapper.delete_ConstCharVector

# Register ConstCharVector in _c2g_wrapper:
_c2g_wrapper.ConstCharVector_swigregister(ConstCharVector)

automatic = _c2g_wrapper.automatic
dsn6 = _c2g_wrapper.dsn6
dsn6_swap = _c2g_wrapper.dsn6_swap
brix = _c2g_wrapper.brix
mrc = _c2g_wrapper.mrc
no_modifier = _c2g_wrapper.no_modifier
log_modifier = _c2g_wrapper.log_modifier
write_nothing = _c2g_wrapper.write_nothing
write_grid_ad4 = _c2g_wrapper.write_grid_ad4
write_grid_mrc = _c2g_wrapper.write_grid_mrc
PI = _c2g_wrapper.PI

def map2float(c):
    return _c2g_wrapper.map2float(c)

def read_grid_map(filename, sizeX, sizeY, sizeZ, map_storage=None):
    return _c2g_wrapper.read_grid_map(filename, sizeX, sizeY, sizeZ, map_storage)
DSN6_BLOCKSIZE = _c2g_wrapper.DSN6_BLOCKSIZE
MAPEPS = _c2g_wrapper.MAPEPS

def find_block(brix_string):
    return _c2g_wrapper.find_block(brix_string)

def brix_number_float(brix_string):
    return _c2g_wrapper.brix_number_float(brix_string)

def brix_number_int(brix_string):
    return _c2g_wrapper.brix_number_int(brix_string)

def brix_entry(brix_string, name, report_error=True):
    return _c2g_wrapper.brix_entry(brix_string, name, report_error)

def determine_map_type(header):
    return _c2g_wrapper.determine_map_type(header)

def read_map_to_grid(filename, map_type, map_x_dim, map_y_dim, map_z_dim, map_x_center, map_y_center, map_z_center, grid_spacing):
    return _c2g_wrapper.read_map_to_grid(filename, map_type, map_x_dim, map_y_dim, map_z_dim, map_x_center, map_y_center, map_z_center, grid_spacing)

def num2str(num):
    return _c2g_wrapper.num2str(num)

def write_grid_map_ad4(grid_map, filename, map_x_dim, map_y_dim, map_z_dim, map_x_center, map_y_center, map_z_center, grid_spacing, set_extension=True):
    return _c2g_wrapper.write_grid_map_ad4(grid_map, filename, map_x_dim, map_y_dim, map_z_dim, map_x_center, map_y_center, map_z_center, grid_spacing, set_extension)

def write_grid_map_mrc(grid_map, filename, map_x_dim, map_y_dim, map_z_dim, map_x_center, map_y_center, map_z_center, grid_spacing, rho_min=-1, rho_max=1, set_extension=True):
    return _c2g_wrapper.write_grid_map_mrc(grid_map, filename, map_x_dim, map_y_dim, map_z_dim, map_x_center, map_y_center, map_z_center, grid_spacing, rho_min, rho_max, set_extension)

def write_grid(grid_map, filename, write_mode=write_grid_ad4, timing=True):
    return _c2g_wrapper.write_grid(grid_map, filename, write_mode, timing)

def modify_densities(densities, mod_fxn=no_modifier, fxn_params=None):
    return _c2g_wrapper.modify_densities(densities, mod_fxn, fxn_params)

cvar = _c2g_wrapper.cvar
mrc_offsets = cvar.mrc_offsets

